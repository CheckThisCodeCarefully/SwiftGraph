SwiftGraph.swift
	var u: Int
	var v: Int
	var weighted: Bool
	var directed: Bool
	var reversed: Edge
	var u: Int
	var v: Int
	var weighted: Bool
	let directed: Bool
	var reversed:Edge
	init(u: Int, v: Int, directed: Bool)
	var description: String
	func ==(lhs: UnweightedEdge, rhs: UnweightedEdge) -> Bool
	protocol Summable
	override var weighted: Bool
	let weight: W
	override var reversed:Edge
	init(u: Int, v: Int, directed: Bool, weight: W)
	override var description: String
	func ==<W>(lhs: WeightedEdge<W>, rhs: WeightedEdge<W>) -> Bool
	init()
	init(vertices: [V])
	var description: String
	override init()
	override init(vertices: [T])
	override init()
	override init(vertices: [T])
	override var description: String
	var container: [T] = [T]()
	var isEmpty: Bool
	func push(thing: T)
	func pop() -> T
	var container: [T] = [T]()
	var isEmpty: Bool
	var count: Int
	func push(thing: T)
	func pop() -> T
	func contains(thing: T) -> Bool
	func pathDictToPath(from: Int, to: Int, pathDict:[Int:Edge]) -> [Edge]
	func pathDictToPath<W: protocol<Comparable, Summable>>(from: Int, to: Int, pathDict:[Int:WeightedEdge<W>]) -> [WeightedEdge<W>]
	func edgesToVertices<T: Equatable, W: protocol<Comparable, Summable>>(edges: [WeightedEdge<W>], graph: Graph<T>) -> [T]
	func djikstra<T: Equatable, W: protocol<Comparable, Summable>> (graph: WeightedGraph<T, W>, root: T) -> ([W?], [Int: WeightedEdge<W>])
Swift
	struct Double
	struct Float
AppDelegate.swift
	class NineTailView: NSView
	enum Coin: String
	struct NineTailPosition: Equatable
	func ==(lhs: NineTailPosition, rhs: NineTailPosition) -> Bool
	class AppDelegate: NSObject, NSApplicationDelegate
